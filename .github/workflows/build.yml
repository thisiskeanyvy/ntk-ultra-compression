name: Build NTK Ultra-Compression

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.os }}
    
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: Linux
            os: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            artifact_path: target/release/bundle/deb/ntk-ultra-compression*.deb
            asset_name: ntk-ultra-compression-linux-amd64.deb
          
          - name: Windows
            os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_path: target/release/bundle/msi/NTK*.msi
            asset_name: ntk-ultra-compression-windows-amd64.msi
          
          - name: macOS
            os: macos-latest
            target: aarch64-apple-darwin
            artifact_path: target/aarch64-apple-darwin/release/bundle/dmg/NTK*.dmg
            asset_name: ntk-ultra-compression-macos-arm64.dmg

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.platform.target }}
          override: true
          profile: minimal

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: gui/package-lock.json

      - name: Install Linux dependencies
        if: matrix.platform.os == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.0-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            patchelf \
            build-essential \
            curl \
            wget \
            file \
            libssl-dev \
            libxcb-render0-dev \
            libxcb-shape0-dev \
            libxcb-xfixes0-dev

      - name: Install macOS dependencies
        if: matrix.platform.os == 'macos-latest'
        run: |
          brew install create-dmg
          rustup target add aarch64-apple-darwin

      - name: Install dependencies
        working-directory: gui
        run: npm install

      - name: Build Tauri app (macOS)
        if: matrix.platform.os == 'macos-latest'
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        with:
          projectPath: gui
          tagName: ${{ github.ref_name }}
          releaseName: "NTK Ultra-Compression v${{ github.ref_name }}"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: true
          prerelease: false
          args: --target aarch64-apple-darwin
          tauriScript: npm run tauri

      - name: Build Tauri app (non-macOS)
        if: matrix.platform.os != 'macos-latest'
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        with:
          projectPath: gui
          tagName: ${{ github.ref_name }}
          releaseName: "NTK Ultra-Compression v${{ github.ref_name }}"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: true
          prerelease: false

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.asset_name }}
          path: ${{ matrix.platform.artifact_path }}
          if-no-files-found: error

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/**/*
          draft: true
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }} 